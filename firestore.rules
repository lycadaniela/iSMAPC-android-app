rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isParentOfChild(parentEmail) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/parents/$(request.auth.uid)/profile) &&
        get(/databases/$(database)/documents/users/parents/$(request.auth.uid)/profile).data.email == parentEmail;
    }

    // Parent profiles
    match /users/parents/{userId}/profile {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Child profiles with profile as collection
    match /users/child/profile/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) ||
                   (isAuthenticated() && 
                    request.resource.data.parentEmail == request.auth.token.email);
    }

    // Allow collection group queries on any 'profile' subcollection
    match /{document=**}/profile/{profileId} {
      allow read: if request.auth != null 
                  && request.auth.token.email == resource.data.parentEmail;
    }

    // Allow listing collections
    match /users/{document=**} {
      allow list: if isAuthenticated();
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
