rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isParent() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/parents/$(request.auth.uid)/profile);
    }

    function isChild() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/child/profile/$(request.auth.uid));
    }

    function isParentOfChild(childId) {
      let parentProfile = get(/databases/$(database)/documents/users/parents/$(request.auth.uid)/profile);
      let childProfile = get(/databases/$(database)/documents/users/child/profile/$(childId));
      return isAuthenticated() && 
        parentProfile != null && 
        childProfile != null &&
        parentProfile.data.email == childProfile.data.parentEmail;
    }

    // Parent profiles
    match /users/parents/{userId}/profile {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Child profiles
    match /users/child/profile/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        // Allow if the parentEmail matches the authenticated user's email
        request.resource.data.parentEmail == request.auth.token.email ||
        // Or if the authenticated user is a parent
        exists(/databases/$(database)/documents/users/parents/$(request.auth.uid)/profile) ||
        // Or if the parentEmail is provided in the request
        request.resource.data.parentEmail != null
      );
      allow update: if isOwner(userId) ||
                   (isAuthenticated() && 
                    request.resource.data.parentEmail == request.auth.token.email);
      allow delete: if isAuthenticated() && (
        // Allow if the user is a parent
        exists(/databases/$(database)/documents/users/parents/$(request.auth.uid)/profile) ||
        // Or if the user is the owner
        request.auth.uid == userId
      );
    }

    // App usage collection
    match /appUsage/{childId} {
      allow read: if isAuthenticated() && (
        childId == request.auth.uid ||
        isParentOfChild(childId)
      );
      allow write, delete: if isAuthenticated() && (
        childId == request.auth.uid ||
        isParentOfChild(childId)
      );
      
      // Stats subcollection
      match /stats/{documentId} {
        allow read: if isAuthenticated() && (
          childId == request.auth.uid ||
          isParentOfChild(childId)
        );
        allow write, delete: if isAuthenticated() && (
          childId == request.auth.uid ||
          isParentOfChild(childId)
        );
      }
    }

    // Screen time data
    match /screenTime/{childId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == childId ||
        isParentOfChild(childId)
      );
      allow write, delete: if isAuthenticated() && (
        request.auth.uid == childId ||
        isParentOfChild(childId)
      );
    }

    // Location data
    match /locations/{childId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == childId ||
        isParentOfChild(childId)
      );
      allow write: if isAuthenticated() && (
        request.auth.uid == childId ||
        isParentOfChild(childId)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == childId ||
        isParentOfChild(childId)
      );
      
      // History subcollection
      match /history/{documentId} {
        allow read: if isAuthenticated() && (
          request.auth.uid == childId ||
          isParentOfChild(childId)
        );
        allow write: if isAuthenticated() && (
          request.auth.uid == childId ||
          isParentOfChild(childId)
        );
        allow delete: if isAuthenticated() && (
          request.auth.uid == childId ||
          isParentOfChild(childId)
        );
      }
    }

    // Installed apps data
    match /installedApps/{userId} {
      allow read: if isAuthenticated() && (
        userId == request.auth.uid ||
        isParentOfChild(userId)
      );
      allow write, delete: if isAuthenticated() && (
        userId == request.auth.uid ||
        isParentOfChild(userId)
      );
    }

    // Locked apps data
    match /lockedApps/{userId} {
      allow read: if isAuthenticated() && (
        userId == request.auth.uid ||
        isParentOfChild(userId)
      );
      allow write, delete: if isAuthenticated() && isParentOfChild(userId);
    }

    // Content filtering data
    match /contentFiltering/{childId} {
      allow read: if isAuthenticated() && (
        childId == request.auth.uid ||
        isParentOfChild(childId)
      );
      allow write, delete: if isAuthenticated() && isParentOfChild(childId);
    }

    // Content to filter collection
    match /contentToFilter/{userId} {
      allow read: if isAuthenticated() && (
        userId == request.auth.uid ||
        isParentOfChild(userId)
      );
      allow write, delete: if isAuthenticated() && (
        userId == request.auth.uid ||
        isParentOfChild(userId)
      );
    }

    // Device locks collection
    match /deviceLocks/{childId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == childId ||
        exists(/databases/$(database)/documents/users/parents/$(request.auth.uid)/profile)
      );
      allow write, delete: if isAuthenticated() && (
        // Allow if the user is a parent
        exists(/databases/$(database)/documents/users/parents/$(request.auth.uid)/profile) ||
        // Or if the user is the child
        request.auth.uid == childId
      );
    }

    // Deletion requests collection
    match /deletionRequests/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        exists(/databases/$(database)/documents/users/parents/$(request.auth.uid)/profile)
      );
      allow create: if isAuthenticated() && (
        // Allow if the user is a parent
        exists(/databases/$(database)/documents/users/parents/$(request.auth.uid)/profile) ||
        // Or if the user is the child
        request.auth.uid == userId
      );
      allow update, delete: if false; // Only admins can update or delete requests
    }

    // Allow collection group queries on any 'profile' subcollection
    match /{document=**}/profile/{profileId} {
      allow read: if isAuthenticated() && (
        // Allow if the parentEmail matches the authenticated user's email
        resource.data.parentEmail == request.auth.token.email ||
        // Or if the authenticated user is a parent
        exists(/databases/$(database)/documents/users/parents/$(request.auth.uid)/profile)
      );
    }

    // Allow listing collections
    match /users/{document=**} {
      allow list: if isAuthenticated();
    }

    // Device controls collection
    match /deviceControls/{childId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == childId ||
        isParentOfChild(childId)
      );
      allow write: if isAuthenticated() && isParentOfChild(childId);
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
