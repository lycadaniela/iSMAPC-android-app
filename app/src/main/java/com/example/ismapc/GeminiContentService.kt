package com.example.ismapc

import android.content.Context
import android.util.Log
import com.google.ai.client.generativeai.GenerativeModel
import com.google.ai.client.generativeai.type.content
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.Timestamp
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.coroutines.tasks.await
import java.util.*

/**
 * Service to interact with Gemini AI for generating content suggestions
 * based on a child's app usage patterns.
 */
class GeminiContentService(private val context: Context) {
    private val TAG = "GeminiContentService"
    private val firestore = FirebaseFirestore.getInstance()
    private val auth = FirebaseAuth.getInstance()
    
    // Get API key from resources
    private val API_KEY = context.getString(R.string.gemini_api_key)
    
    // Rate limiting
    private var lastApiCall = 0L
    private val MIN_API_CALL_INTERVAL = 1000L // 1 second between calls
    
    // Categories for suggestions
    enum class SuggestionCategory {
        EDUCATIONAL, ENTERTAINMENT, PRODUCTIVITY, HEALTH, CREATIVE
    }
    
    // Data class for structured suggestions
    data class ContentSuggestion(
        val title: String,
        val description: String,
        val category: SuggestionCategory,
        val ageAppropriate: Boolean = true,
        val imageUrl: String? = null,
        val linkUrl: String? = null,
        val timestamp: Long = Calendar.getInstance().timeInMillis
    )
    
    /**
     * Generate content suggestions based on the child's app usage data.
     * @param childId The ID of the child to generate suggestions for
     * @return List of content suggestions or empty list if generation fails
     */
    suspend fun generateSuggestions(childId: String): List<ContentSuggestion> {
        try {
            Log.d(TAG, "Generating suggestions for child: $childId")
            
            // Check rate limiting
            val currentTime = System.currentTimeMillis()
            if (currentTime - lastApiCall < MIN_API_CALL_INTERVAL) {
                Log.w(TAG, "Rate limiting: Too many API calls")
                return generateRandomFallbackSuggestions()
            }
            lastApiCall = currentTime
            
            // 1. Retrieve the child's app usage data from Firestore
            val appUsageData = getAppUsageData(childId)
            if (appUsageData.isEmpty()) {
                Log.e(TAG, "No app usage data available for child: $childId. Using random fallback suggestions.")
                return generateRandomFallbackSuggestions()
            }
            
            // 2. Get child's profile to know their age
            val childAge = getChildAge(childId)
            Log.d(TAG, "Child age: $childAge")
            
            // 3. Format data for Gemini prompt
            val prompt = createGeminiPrompt(appUsageData, childAge)
            Log.d(TAG, "Generated prompt: $prompt")
            
            // 4. Call Gemini API
            val suggestions = callGeminiAPI(prompt)
            if (suggestions.isEmpty()) {
                Log.w(TAG, "No suggestions generated by Gemini. Using random fallback suggestions.")
                return generateRandomFallbackSuggestions()
            }
            
            return suggestions
        } catch (e: Exception) {
            Log.e(TAG, "Error generating suggestions: ${e.message}", e)
            return generateRandomFallbackSuggestions()
        }
    }
    
    /**
     * Retrieve the child's app usage data from Firestore.
     */
    private suspend fun getAppUsageData(childId: String): Map<String, Long> {
        return try {
            val result = mutableMapOf<String, Long>()
            
            val document = withContext(Dispatchers.IO) {
                firestore.collection("appUsage")
                    .document(childId)
                    .collection("stats")
                    .document("daily")
                    .get()
                    .await()
            }
            
            if (document.exists()) {
                Log.d(TAG, "Found app usage data for child: $childId")
                @Suppress("UNCHECKED_CAST")
                val appsData = document.get("apps") as? Map<String, Map<String, Any>> ?: return emptyMap()
                
                for ((appName, appData) in appsData) {
                    val weeklyMinutes = (appData["weeklyMinutes"] as? Number)?.toLong() ?: 0L
                    val packageName = (appData["packageName"] as? String) ?: ""
                    
                    // Skip sample data
                    if (packageName.contains(".SAMPLE") || appName.contains("[SAMPLE]")) {
                        Log.d(TAG, "Skipping sample app: $appName")
                        continue
                    }
                    
                    // Store app usage time
                    result[appName] = weeklyMinutes
                    Log.d(TAG, "Added app usage: $appName - $weeklyMinutes minutes")
                }
            } else {
                Log.w(TAG, "No app usage data found for child: $childId")
            }
            
            result
        } catch (e: Exception) {
            Log.e(TAG, "Error retrieving app usage data: ${e.message}", e)
            emptyMap()
        }
    }
    
    /**
     * Get child's age from their profile.
     */
    private val TARGET_AGE_RANGE = "3-10 years old"

    private suspend fun getChildAge(childId: String): String {
        return TARGET_AGE_RANGE
    }
    
    /**
     * Create a structured prompt for Gemini based on the child's app usage and age.
     */
    private fun createGeminiPrompt(appUsage: Map<String, Long>, childAge: String): String {
        // Sort apps by usage time (descending)
        val sortedApps = appUsage.entries.sortedByDescending { it.value }
            .take(10)
        
        // Analyze usage patterns
        val totalUsage = appUsage.values.sum()
        val educationalApps = sortedApps.filter { it.key.contains("edu") || it.key.contains("learn") }
        val entertainmentApps = sortedApps.filter { it.key.contains("game") || it.key.contains("play") }
        val productivityApps = sortedApps.filter { it.key.contains("note") || it.key.contains("todo") }
        
        val educationalTime = educationalApps.sumOf { it.value }
        val entertainmentTime = entertainmentApps.sumOf { it.value }
        val productivityTime = productivityApps.sumOf { it.value }
        
        val usagePatterns = buildString {
            append("Usage Patterns:\n")
            append("- Educational usage: ${"%.1f".format(100.0 * educationalTime / totalUsage)}%\n")
            append("- Entertainment usage: ${"%.1f".format(100.0 * entertainmentTime / totalUsage)}%\n")
            append("- Productivity usage: ${"%.1f".format(100.0 * productivityTime / totalUsage)}%\n")
        }
        
        val appListText = sortedApps.joinToString("\n") { (app, minutes) ->
            "- $app: ${minutes} minutes per week"
        }
        
        Log.d(TAG, "Usage patterns analysis:")
        Log.d(TAG, usagePatterns)
        Log.d(TAG, "Top apps:")
        sortedApps.forEach { (app, minutes) ->
            Log.d(TAG, "App: $app, Usage: $minutes minutes")
        }
        
        return """
            You are a helpful assistant providing content suggestions for a child.
            
            Target age range: $TARGET_AGE_RANGE
            Usage Patterns: $usagePatterns
            
            The child frequently uses these apps (weekly usage time):
            $appListText
            
            Based on this information and usage patterns, suggest 5 age-appropriate content ideas, activities, or resources that:
            1. Align with the child's interests shown by their app usage
            2. Are educational but engaging
            3. Are appropriate for children aged 3-10 years old
            4. Encourage healthy digital habits
            5. Include a mix of online and offline activities
            6. Consider the usage patterns (educational vs entertainment vs productivity)
            
            Format each suggestion as follows:
            Title: [Title]
            Description: [Brief description]
            Category: [One of: EDUCATIONAL, ENTERTAINMENT, PRODUCTIVITY, HEALTH, CREATIVE]
            ImageURL: [Optional URL to a relevant image]
            LinkURL: [Optional URL to a website, video, or resource]
            
            IMPORTANT: 
            - Ensure all suggestions are age-appropriate, safe, and beneficial for children aged 3-10 years old.
            - For online suggestions, include direct URLs to safe, child-appropriate resources.
            - For image suggestions, provide URLs to appropriate educational or informative images.
            - All URLs must be to reputable, safe, and age-appropriate websites.
            - Consider the usage patterns and suggest a balanced mix of educational and entertainment content
        """.trimIndent()
    }
    
    /**
     * Call the Gemini API to generate suggestions.
     */
    private suspend fun callGeminiAPI(prompt: String): List<ContentSuggestion> {
        return try {
            Log.d(TAG, "Calling Gemini API with prompt: $prompt")
            
            // Initialize Gemini model
            val model = GenerativeModel(
                modelName = "gemini-pro",
                apiKey = API_KEY
            )
            
            // Generate content
            val response = withContext(Dispatchers.IO) {
                model.generateContent(
                    content {
                        text(prompt)
                    }
                )
            }
            
            val responseText = response.text ?: ""
            Log.d(TAG, "Gemini response received: $responseText")
            
            // Parse the response into structured suggestion objects
            parseGeminiResponse(responseText)
        } catch (e: Exception) {
            Log.e(TAG, "Error calling Gemini API: ${e.message}", e)
            
            // Return fallback suggestions in case of API failure
            generateRandomFallbackSuggestions()
        }
    }
    
    /**
     * Parse the Gemini text response into structured ContentSuggestion objects.
     */
    private fun parseGeminiResponse(response: String): List<ContentSuggestion> {
        val suggestions = mutableListOf<ContentSuggestion>()
        
        try {
            // Split the response by suggestion blocks (each starting with "Title:")
            val suggestionBlocks = response.split("Title:").filter { it.isNotBlank() }
            
            for (block in suggestionBlocks) {
                try {
                    val lines = block.trim().split("\n")
                    
                    val title = lines[0].trim()
                    
                    // Find description line
                    val descriptionLine = lines.find { it.startsWith("Description:") }
                    val description = descriptionLine?.substringAfter("Description:")?.trim() ?: ""
                    
                    // Find category line
                    val categoryLine = lines.find { it.startsWith("Category:") }
                    val categoryStr = categoryLine?.substringAfter("Category:")?.trim() ?: "EDUCATIONAL"
                    
                    // Parse category
                    val category = try {
                        SuggestionCategory.valueOf(categoryStr.uppercase())
                    } catch (e: Exception) {
                        SuggestionCategory.EDUCATIONAL
                    }
                    
                    // Find image URL
                    val imageUrlLine = lines.find { it.startsWith("ImageURL:") }
                    val imageUrl = imageUrlLine?.substringAfter("ImageURL:")?.trim()
                    
                    // Find link URL
                    val linkUrlLine = lines.find { it.startsWith("LinkURL:") }
                    val linkUrl = linkUrlLine?.substringAfter("LinkURL:")?.trim()
                    
                    // Create and add suggestion
                    suggestions.add(
                        ContentSuggestion(
                            title = title,
                            description = description,
                            category = category,
                            imageUrl = imageUrl,
                            linkUrl = linkUrl
                        )
                    )
                } catch (e: Exception) {
                    Log.e(TAG, "Error parsing suggestion block: $block", e)
                    // Continue with next block
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error parsing Gemini response: ${e.message}", e)
        }
        
        return if (suggestions.isEmpty()) {
            // If parsing failed, return fallback suggestions
            generateRandomFallbackSuggestions()
        } else {
            suggestions
        }
    }
    
    /**
     * Generate random fallback suggestions with variety.
     */
    private fun generateRandomFallbackSuggestions(): List<ContentSuggestion> {
        val allSuggestions = listOf(
            // Educational Suggestions
            ContentSuggestion(
                title = "Science Experiment: Rainbow in a Jar",
                description = "Create a colorful density experiment using sugar water and food coloring!",
                category = SuggestionCategory.EDUCATIONAL,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/2172/2172493.png",
                linkUrl = "https://www.sciencekids.co.nz/experiments/rainbowjar.html"
            ),
            ContentSuggestion(
                title = "Math Adventure",
                description = "Solve fun math puzzles and challenges in an interactive game environment.",
                category = SuggestionCategory.EDUCATIONAL,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/2331/2331860.png",
                linkUrl = "https://www.prodigygame.com/"
            ),
            ContentSuggestion(
                title = "Virtual Museum Tour",
                description = "Explore famous museums around the world through virtual tours!",
                category = SuggestionCategory.EDUCATIONAL,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/2436/2436882.png",
                linkUrl = "https://artsandculture.google.com/"
            ),
            ContentSuggestion(
                title = "Language Learning Game",
                description = "Learn a new language through fun games and interactive lessons.",
                category = SuggestionCategory.EDUCATIONAL,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/2436/2436882.png",
                linkUrl = "https://www.duolingo.com/"
            ),

            // Creative Suggestions
            ContentSuggestion(
                title = "Digital Art Studio",
                description = "Create amazing digital art using free online drawing tools.",
                category = SuggestionCategory.CREATIVE,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/1547/1547527.png",
                linkUrl = "https://www.autodraw.com/"
            ),
            ContentSuggestion(
                title = "Music Maker",
                description = "Compose your own music using online instruments and loops.",
                category = SuggestionCategory.CREATIVE,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/2721/2721620.png",
                linkUrl = "https://www.musiclab.chromeexperiments.com/"
            ),
            ContentSuggestion(
                title = "Stop Motion Animation",
                description = "Create your own stop motion movie using your device's camera.",
                category = SuggestionCategory.CREATIVE,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/1547/1547527.png",
                linkUrl = "https://www.stopmotionstudio.com/"
            ),
            ContentSuggestion(
                title = "Story Creator",
                description = "Write and illustrate your own digital storybook.",
                category = SuggestionCategory.CREATIVE,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/2436/2436882.png",
                linkUrl = "https://www.storyjumper.com/"
            ),

            // Health and Outdoor Suggestions
            ContentSuggestion(
                title = "Family Fitness Challenge",
                description = "Try fun family exercises and track your progress together!",
                category = SuggestionCategory.HEALTH,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/2382/2382461.png",
                linkUrl = "https://www.gonoodle.com/"
            ),
            ContentSuggestion(
                title = "Nature Explorer",
                description = "Go on a nature walk and identify different plants and animals.",
                category = SuggestionCategory.HEALTH,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/2382/2382461.png",
                linkUrl = "https://www.inaturalist.org/"
            ),
            ContentSuggestion(
                title = "Yoga Adventure",
                description = "Learn fun yoga poses and create your own yoga routine.",
                category = SuggestionCategory.HEALTH,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/2382/2382461.png",
                linkUrl = "https://www.cosmickids.com/"
            ),
            ContentSuggestion(
                title = "Healthy Cooking",
                description = "Learn to make simple, healthy snacks with your family.",
                category = SuggestionCategory.HEALTH,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/2382/2382461.png",
                linkUrl = "https://www.healthykids.nsw.gov.au/"
            ),

            // Productivity Suggestions
            ContentSuggestion(
                title = "Goal Setting Adventure",
                description = "Create a fun goal tracker and celebrate your achievements!",
                category = SuggestionCategory.PRODUCTIVITY,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/2721/2721620.png",
                linkUrl = "https://www.habitica.com/"
            ),
            ContentSuggestion(
                title = "Digital Journal",
                description = "Start a digital journal to record your thoughts and experiences.",
                category = SuggestionCategory.PRODUCTIVITY,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/2436/2436882.png",
                linkUrl = "https://www.journalbuddies.com/"
            ),
            ContentSuggestion(
                title = "Coding Adventure",
                description = "Learn to code by creating fun games and animations.",
                category = SuggestionCategory.PRODUCTIVITY,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/2721/2721620.png",
                linkUrl = "https://scratch.mit.edu/"
            ),
            ContentSuggestion(
                title = "Time Management Game",
                description = "Learn to manage your time through fun interactive challenges.",
                category = SuggestionCategory.PRODUCTIVITY,
                imageUrl = "https://cdn-icons-png.flaticon.com/512/2721/2721620.png",
                linkUrl = "https://www.timetimer.com/"
            )
        )
        
        // Randomly select 5 different suggestions
        return allSuggestions.shuffled().take(5)
    }
    
    /**
     * Store the generated suggestions in Firestore.
     */
    // Removed since we're not storing suggestions in Firestore anymore
} 